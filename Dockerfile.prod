# Creating multi-stage build for production
FROM node:lts-alpine3.20 AS build
RUN apk update && apk add --no-cache \
      build-base gcc autoconf automake zlib-dev libpng-dev \
      nasm bash vips-dev git curl python3 make g++ libc6-compat

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# 1) Set up workspace at root level to handle monorepo properly
WORKDIR /workspace

# 2) Copy root package.json, yarn configuration and lock files first for better caching
COPY package.json yarn.lock .yarnrc.yml ./

# Note: Skipping .yarn/ copy since we're using corepack for yarn management
# and excluding cache to avoid platform-specific issues

# 3) Copy all workspace package.json files and necessary scripts for dependency resolution
COPY launchpad/package.json ./launchpad/
COPY launchpad/scripts/ ./launchpad/scripts/
COPY launchpad/next/package.json ./launchpad/next/
COPY launchpad/strapi/package.json ./launchpad/strapi/

# 4) Enable Corepack and prepare Yarn
RUN corepack enable \
 && corepack prepare yarn@4.9.2 --activate

# 5) Install all dependencies for the monorepo
# Disable checksum verification and let Yarn build its own cache
ENV YARN_CHECKSUM_BEHAVIOR=ignore
RUN yarn install --inline-builds

# 6) Copy only the necessary source code for builds
# Copy launchpad source code only (what we actually need to build)
COPY launchpad/next ./launchpad/next
COPY launchpad/strapi ./launchpad/strapi
COPY launchpad/entrypoint.sh ./launchpad/entrypoint.sh
COPY launchpad/supervisor.conf ./launchpad/supervisor.conf

# 7) Build the applications in the correct working directories
# Build Next.js app
WORKDIR /workspace/launchpad/next
RUN yarn build

# Build Strapi app  
WORKDIR /workspace/launchpad/strapi
RUN yarn build

# Creating final production image
FROM node:lts-alpine3.20
RUN apk add --no-cache nasm bash vips-dev curl supervisor && \
    rm -rf /var/cache/apk/*

RUN corepack enable && corepack prepare yarn@4.9.2 --activate

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/app

# Copy built application from build stage (only production files)
COPY --from=build --chown=node:node /workspace/package.json ./package.json
COPY --from=build --chown=node:node /workspace/.yarnrc.yml ./.yarnrc.yml
COPY --from=build --chown=node:node /workspace/yarn.lock ./yarn.lock
COPY --from=build --chown=node:node /workspace/.yarn ./.yarn
COPY --from=build --chown=node:node /workspace/node_modules ./node_modules
COPY --from=build --chown=node:node /workspace/launchpad ./launchpad

# Set PATH to include node_modules/.bin
ENV PATH=/opt/app/node_modules/.bin:$PATH

# Backup the default config files (only if config exists and is not empty)
RUN mkdir -p /opt/app/launchpad/strapi/config-backup && \
    if [ -d /opt/app/launchpad/strapi/config ] && [ "$(ls -A /opt/app/launchpad/strapi/config 2>/dev/null)" ]; then \
      cp -r /opt/app/launchpad/strapi/config/* /opt/app/launchpad/strapi/config-backup/; \
    fi

# Copy the entrypoint script and set permissions
COPY launchpad/entrypoint.sh /opt/app/entrypoint.sh
RUN chmod +x /opt/app/entrypoint.sh

# Copy supervisor config
COPY launchpad/supervisor.conf /etc/supervisor/conf.d/supervisor.conf

USER node
EXPOSE 1337 3000
ENTRYPOINT ["/opt/app/entrypoint.sh"]
CMD ["supervisord", "-c", "/etc/supervisor/conf.d/supervisor.conf"]